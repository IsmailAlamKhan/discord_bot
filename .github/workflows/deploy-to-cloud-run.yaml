# .github/workflows/deploy-to-cloud-run.yaml

name: Deploy to Cloud Run

# Trigger the workflow on push events to the main branch
on:
  push:
    branches: [main] # Or master, or your default branch

env:
  # === REPLACE THESE VALUES ===
  GCP_PROJECT_ID: red-door-bot # Your Google Cloud Project ID
  GAR_LOCATION: us-central1 # Region for Artifact Registry AND Cloud Run (e.g., us-central1)
  GAR_REPOSITORY: reddoor-bot # Your Artifact Registry repository name
  SERVICE_NAME: reddoor-bot-service # Your Cloud Run service name
  IMAGE_NAME: reddoor-bot # Name for the Docker image
  # === Your Secret Manager secret names (ensure these match what create_secrets.sh produced) ===
  SECRET_BOT_TOKEN_NAME: bot-token
  SECRET_ADMIN_ID_NAME: admin-user-id
  SECRET_FOOTER_TEXT_NAME: footer-text
  SECRET_WAIFU_API_NAME: waifu-api-url
  SECRET_GUILD_ID_NAME: guild-id

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    # === Add permissions for Workload Identity Federation ===
    permissions:
      contents: "read"
      # id-token: 'write' # No longer needed for SA Key auth

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use the latest major version

      # - name: Authenticate to Google Cloud (Workload Identity Federation)
      #   uses: google-github-actions/auth@v2 # Use the latest major version
      #   with:
      #     workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }} # Stored in GitHub Secrets
      #     service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}            # Stored in GitHub Secrets

      # NOTE: If you prefer not to use Workload Identity Federation, you can use a Service Account Key JSON:
      - name: Authenticate to Google Cloud (Service Account Key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} # Store the JSON key content in GitHub Secrets

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2 # Use the latest major version

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build \
            --tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
            .

      - name: Push Docker image to Artifact Registry
        run: docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2 # Use the latest major version
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.GAR_LOCATION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # === Set environment variables from Secret Manager ===
          secrets: |-
            BOT_TOKEN=${{ env.SECRET_BOT_TOKEN_NAME }}:latest
            ADMIN_USER_ID=${{ env.SECRET_ADMIN_ID_NAME }}:latest
            FOOTER_TEXT=${{ env.SECRET_FOOTER_TEXT_NAME }}:latest
            WAIFU_API_URL=${{ env.SECRET_WAIFU_API_NAME }}:latest
            GUILD_ID=${{ env.SECRET_GUILD_ID_NAME }}:latest
          # === Set Cloud Run flags ===
          flags: |-
            --cpu-always-allocated
            --min-instances=1
            --quiet
            # Add other flags below if needed, each on a new line, e.g.:
            # --memory=512Mi
            # --cpu=1

      - name: Output Cloud Run service URL (if needed)
        run: |
          echo "Cloud Run Service URL: ${{ steps.deploy.outputs.url }}"
